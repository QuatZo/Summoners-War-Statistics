// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Summoners_War_Statistics;
//
//    var jsonSwex = JsonSwex.FromJson(jsonString);

namespace Summoners_War_Statistics
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class JsonSwex
    {
        [JsonProperty("command", NullValueHandling = NullValueHandling.Ignore)]
        public string Command { get; set; }

        [JsonProperty("ret_code", NullValueHandling = NullValueHandling.Ignore)]
        public long? RetCode { get; set; }

        [JsonProperty("wizard_info", NullValueHandling = NullValueHandling.Ignore)]
        public WizardInfo WizardInfo { get; set; }

        [JsonProperty("defense_unit_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<DefenseUnitListElement> DefenseUnitList { get; set; }

        [JsonProperty("quest_rewarded", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> QuestRewarded { get; set; }

        [JsonProperty("event_id_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> EventIdList { get; set; }

        [JsonProperty("building_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<Dictionary<string, double>> BuildingList { get; set; }

        [JsonProperty("deco_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<DecoListElement> DecoList { get; set; }

        [JsonProperty("obstacle_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> ObstacleList { get; set; }

        [JsonProperty("mob_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<DecoListElement> MobList { get; set; }

        [JsonProperty("mob_costume_equip_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<MobCostumeEquipList> MobCostumeEquipList { get; set; }

        [JsonProperty("mob_costume_part_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<MobCostumePartList> MobCostumePartList { get; set; }

        [JsonProperty("unit_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleUnitList> UnitList { get; set; }

        [JsonProperty("runes", NullValueHandling = NullValueHandling.Ignore)]
        public List<Rune> Runes { get; set; }

        [JsonProperty("push_noti_status", NullValueHandling = NullValueHandling.Ignore)]
        public long? PushNotiStatus { get; set; }

        [JsonProperty("guild", NullValueHandling = NullValueHandling.Ignore)]
        public Guild Guild { get; set; }

        [JsonProperty("guildwar_defense_unit_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<List<GuildwarDefenseUnitListElement>> GuildwarDefenseUnitList { get; set; }

        [JsonProperty("guildwar_status", NullValueHandling = NullValueHandling.Ignore)]
        public GuildwarStatus GuildwarStatus { get; set; }

        [JsonProperty("guildwar_member_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<GuildwarMemberList> GuildwarMemberList { get; set; }

        [JsonProperty("guild_member_defense_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<GuildMemberDefenseList> GuildMemberDefenseList { get; set; }

        [JsonProperty("guildwar_ranking_info", NullValueHandling = NullValueHandling.Ignore)]
        public GuildwarRankingInfo GuildwarRankingInfo { get; set; }

        [JsonProperty("guildwar_ranking_stat", NullValueHandling = NullValueHandling.Ignore)]
        public GuildwarRankingStat GuildwarRankingStat { get; set; }

        [JsonProperty("guildwar_match_reserve", NullValueHandling = NullValueHandling.Ignore)]
        public GuildwarMatchReserve GuildwarMatchReserve { get; set; }

        [JsonProperty("guildwar_my_dead_unit_id_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> GuildwarMyDeadUnitIdList { get; set; }

        [JsonProperty("my_atkdef_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<MyAtkdefList> MyAtkdefList { get; set; }

        [JsonProperty("my_attack_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<MyAttackList> MyAttackList { get; set; }


        [JsonProperty("opp_guild_info", NullValueHandling = NullValueHandling.Ignore)]
        public GuildInfo OppGuildInfo { get; set; }

        [JsonProperty("opp_guild_member_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<GuildwarMemberList> OppGuildMemberList { get; set; }


        [JsonProperty("guildsiege_defense_unit_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> GuildsiegeDefenseUnitList { get; set; }

        [JsonProperty("guildwar_reward_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<GuildwarRewardList> GuildwarRewardList { get; set; }


        [JsonProperty("unit_lock_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> UnitLockList { get; set; }

        [JsonProperty("rune_lock_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> RuneLockList { get; set; }

        [JsonProperty("shop_daily_bonus_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> ShopDailyBonusList { get; set; }

        [JsonProperty("raid_deck", NullValueHandling = NullValueHandling.Ignore)]
        public RaidDeck RaidDeck { get; set; }

        [JsonProperty("rtpvp_season_info", NullValueHandling = NullValueHandling.Ignore)]
        public RtpvpSeasonInfo RtpvpSeasonInfo { get; set; }

        [JsonProperty("rtpvp_contest_info", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, long> RtpvpContestInfo { get; set; }


        [JsonProperty("object_storage_slots", NullValueHandling = NullValueHandling.Ignore)]
        public Slots ObjectStorageSlots { get; set; }


        [JsonProperty("lobby_proud_unit_id_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<DefenseUnitListElement> LobbyProudUnitIdList { get; set; }


        [JsonProperty("summon_choices", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> SummonChoices { get; set; }

        [JsonProperty("item_cart_next_reset_timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public long? ItemCartNextResetTimestamp { get; set; }

        [JsonProperty("friend_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<FriendListElement> FriendList { get; set; }

        [JsonProperty("helper_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<FriendListElement> HelperList { get; set; }

        [JsonProperty("helper_remained", NullValueHandling = NullValueHandling.Ignore)]
        public long? HelperRemained { get; set; }

        [JsonProperty("mentor_helper_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> MentorHelperList { get; set; }


        [JsonProperty("mentor_slot_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> MentorSlotList { get; set; }


        [JsonProperty("daily_reward_inactive_status", NullValueHandling = NullValueHandling.Ignore)]
        public long? DailyRewardInactiveStatus { get; set; }

        [JsonProperty("daily_reward_new_user_status", NullValueHandling = NullValueHandling.Ignore)]
        public long? DailyRewardNewUserStatus { get; set; }

        [JsonProperty("daily_reward_special_status", NullValueHandling = NullValueHandling.Ignore)]
        public long? DailyRewardSpecialStatus { get; set; }


        [JsonProperty("daily_reward_info", NullValueHandling = NullValueHandling.Ignore)]
        public DailyRewardInfo DailyRewardInfo { get; set; }


        [JsonProperty("pvp_info", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, long> PvpInfo { get; set; }

        [JsonProperty("pvp_reward_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<PvpRewardList> PvpRewardList { get; set; }


        [JsonProperty("worldboss_used_unit", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> WorldbossUsedUnit { get; set; }

        [JsonProperty("my_worldboss_ranking", NullValueHandling = NullValueHandling.Ignore)]
        public MyWorldbossRanking MyWorldbossRanking { get; set; }

        [JsonProperty("my_worldboss_prev_ranking", NullValueHandling = NullValueHandling.Ignore)]
        public MyWorldbossRanking MyWorldbossPrevRanking { get; set; }

        [JsonProperty("my_worldboss_best_ranking", NullValueHandling = NullValueHandling.Ignore)]
        public MyWorldbossRanking MyWorldbossBestRanking { get; set; }

        [JsonProperty("my_worldboss_daily_battle_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? MyWorldbossDailyBattleCount { get; set; }

        [JsonProperty("costume_ticket_purchased_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> CostumeTicketPurchasedList { get; set; }

        [JsonProperty("session_key", NullValueHandling = NullValueHandling.Ignore)]
        public string SessionKey { get; set; }

        [JsonProperty("raid_info_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<RaidInfoList> RaidInfoList { get; set; }

        [JsonProperty("trans_item_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> TransItemList { get; set; }

        [JsonProperty("rtpvp_reward_info", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> RtpvpRewardInfo { get; set; }

        [JsonProperty("rtpvp_contest_reward", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> RtpvpContestReward { get; set; }

        [JsonProperty("dimension_hole_info", NullValueHandling = NullValueHandling.Ignore)]
        public DimensionHoleInfo DimensionHoleInfo { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("tvaluelocal_next_monday", NullValueHandling = NullValueHandling.Ignore)]
        public long? TvaluelocalNextMonday { get; set; }

        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("ts_val", NullValueHandling = NullValueHandling.Ignore)]
        public long? TsVal { get; set; }

        [JsonProperty("tvalue", NullValueHandling = NullValueHandling.Ignore)]
        public long? Tvalue { get; set; }

        [JsonProperty("tvaluelocal", NullValueHandling = NullValueHandling.Ignore)]
        public long? Tvaluelocal { get; set; }

        [JsonProperty("tzone", NullValueHandling = NullValueHandling.Ignore)]
        public string Tzone { get; set; }
    }

    public partial class DailyRewardInfo
    {
        [JsonProperty("month", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Month { get; set; }

        [JsonProperty("is_checked", NullValueHandling = NullValueHandling.Ignore)]
        public long? IsChecked { get; set; }

        [JsonProperty("check_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? CheckCount { get; set; }

        [JsonProperty("prev_last_check", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PrevLastCheck { get; set; }

        [JsonProperty("enable", NullValueHandling = NullValueHandling.Ignore)]
        public long? Enable { get; set; }
    }

    public partial class DecoListElement
    {
        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("deco_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? DecoId { get; set; }

        [JsonProperty("master_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? MasterId { get; set; }

        [JsonProperty("island_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? IslandId { get; set; }

        [JsonProperty("pos_x", NullValueHandling = NullValueHandling.Ignore)]
        public long? PosX { get; set; }

        [JsonProperty("pos_y", NullValueHandling = NullValueHandling.Ignore)]
        public long? PosY { get; set; }

        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        public long? Level { get; set; }

        [JsonProperty("mob_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? MobId { get; set; }
    }

    public partial class DefenseUnitListElement
    {
        [JsonProperty("unit_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitId { get; set; }

        [JsonProperty("pos_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? PosId { get; set; }
    }

    public partial class DimensionHoleInfo
    {
        [JsonProperty("rid", NullValueHandling = NullValueHandling.Ignore)]
        public long? Rid { get; set; }

        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("energy", NullValueHandling = NullValueHandling.Ignore)]
        public long? Energy { get; set; }

        [JsonProperty("date_energy_gain_start", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateEnergyGainStart { get; set; }

        [JsonProperty("date_add", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateAdd { get; set; }

        [JsonProperty("energy_max", NullValueHandling = NullValueHandling.Ignore)]
        public long? EnergyMax { get; set; }

        [JsonProperty("energy_gain_term_sec", NullValueHandling = NullValueHandling.Ignore)]
        public long? EnergyGainTermSec { get; set; }

        [JsonProperty("energy_gain_start_timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public long? EnergyGainStartTimestamp { get; set; }
    }

    public partial class FriendListElement
    {
        [JsonProperty("channel_uid", NullValueHandling = NullValueHandling.Ignore)]
        public long? ChannelUid { get; set; }

        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("wizard_level", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardLevel { get; set; }

        [JsonProperty("wizard_name", NullValueHandling = NullValueHandling.Ignore)]
        public string WizardName { get; set; }

        [JsonProperty("arena_score", NullValueHandling = NullValueHandling.Ignore)]
        public long? ArenaScore { get; set; }

        [JsonProperty("rating_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? RatingId { get; set; }

        [JsonProperty("next_gift_time", NullValueHandling = NullValueHandling.Ignore)]
        public long? NextGiftTime { get; set; }

        [JsonProperty("next_assist_time", NullValueHandling = NullValueHandling.Ignore)]
        public long? NextAssistTime { get; set; }

        [JsonProperty("last_login_timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public long? LastLoginTimestamp { get; set; }

        [JsonProperty("rep_unit_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? RepUnitId { get; set; }

        [JsonProperty("rep_unit_master_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? RepUnitMasterId { get; set; }

        [JsonProperty("rep_unit_class", NullValueHandling = NullValueHandling.Ignore)]
        public long? RepUnitClass { get; set; }

        [JsonProperty("rep_unit_level", NullValueHandling = NullValueHandling.Ignore)]
        public long? RepUnitLevel { get; set; }
    }

    public partial class Guild
    {
        [JsonProperty("price", NullValueHandling = NullValueHandling.Ignore)]
        public long? Price { get; set; }

        [JsonProperty("dc_rate", NullValueHandling = NullValueHandling.Ignore)]
        public long? DcRate { get; set; }

        [JsonProperty("popup_msgs", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> PopupMsgs { get; set; }

        [JsonProperty("guild_info", NullValueHandling = NullValueHandling.Ignore)]
        public GuildInfo GuildInfo { get; set; }

        [JsonProperty("guild_members", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, GuildwarMemberList> GuildMembers { get; set; }

        [JsonProperty("guild_skills", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> GuildSkills { get; set; }
    }

    public partial class GuildInfo
    {
        [JsonProperty("guild_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? GuildId { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("master_wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? MasterWizardId { get; set; }

        [JsonProperty("member_now", NullValueHandling = NullValueHandling.Ignore)]
        public long? MemberNow { get; set; }

        [JsonProperty("member_max", NullValueHandling = NullValueHandling.Ignore)]
        public long? MemberMax { get; set; }

        [JsonProperty("comment", NullValueHandling = NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [JsonProperty("notice", NullValueHandling = NullValueHandling.Ignore)]
        public string Notice { get; set; }

        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        public long? Level { get; set; }

        [JsonProperty("experience", NullValueHandling = NullValueHandling.Ignore)]
        public long? Experience { get; set; }

        [JsonProperty("recruit_status", NullValueHandling = NullValueHandling.Ignore)]
        public long? RecruitStatus { get; set; }

        [JsonProperty("arena_rating_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? ArenaRatingId { get; set; }

        [JsonProperty("last_market_refresh_auto", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastMarketRefreshAuto { get; set; }

        [JsonProperty("last_market_refresh_manual", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastMarketRefreshManual { get; set; }

        [JsonProperty("master_wizard_name", NullValueHandling = NullValueHandling.Ignore)]
        public string MasterWizardName { get; set; }

        [JsonProperty("master_wizard_level", NullValueHandling = NullValueHandling.Ignore)]
        public long? MasterWizardLevel { get; set; }

        [JsonProperty("skill_info", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, SkillInfo> SkillInfo { get; set; }

        [JsonProperty("market_refresh_ts", NullValueHandling = NullValueHandling.Ignore)]
        public long? MarketRefreshTs { get; set; }

        [JsonProperty("next_market_refresh_auto_ts", NullValueHandling = NullValueHandling.Ignore)]
        public long? NextMarketRefreshAutoTs { get; set; }

        [JsonProperty("next_market_refresh_manual_ts", NullValueHandling = NullValueHandling.Ignore)]
        public long? NextMarketRefreshManualTs { get; set; }
    }

    public partial class GuildwarMemberList
    {
        [JsonProperty("guild_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? GuildId { get; set; }

        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("grade", NullValueHandling = NullValueHandling.Ignore)]
        public long? Grade { get; set; }

        [JsonProperty("channel_uid", NullValueHandling = NullValueHandling.Ignore)]
        public long? ChannelUid { get; set; }

        [JsonProperty("wizard_name", NullValueHandling = NullValueHandling.Ignore)]
        public string WizardName { get; set; }

        [JsonProperty("wizard_level", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardLevel { get; set; }

        [JsonProperty("rating_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? RatingId { get; set; }

        [JsonProperty("arena_score", NullValueHandling = NullValueHandling.Ignore)]
        public long? ArenaScore { get; set; }

        [JsonProperty("last_login_timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public long? LastLoginTimestamp { get; set; }

        [JsonProperty("join_timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public long? JoinTimestamp { get; set; }
    }

    public partial class GuildMemberDefenseList
    {
        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("unit_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<List<GuildwarDefenseUnitListElement>> UnitList { get; set; }
    }

    public partial class GuildwarDefenseUnitListElement
    {
        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("battle_round", NullValueHandling = NullValueHandling.Ignore)]
        public long? BattleRound { get; set; }

        [JsonProperty("pos_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? PosId { get; set; }

        [JsonProperty("unit_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitId { get; set; }
    }

    public partial class GuildwarMatchReserve
    {
        [JsonProperty("guild_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? GuildId { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public long? Status { get; set; }

        [JsonProperty("date_mod", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateMod { get; set; }
    }

    public partial class GuildwarRankingInfo
    {
        [JsonProperty("league_type", NullValueHandling = NullValueHandling.Ignore)]
        public long? LeagueType { get; set; }

        [JsonProperty("rank", NullValueHandling = NullValueHandling.Ignore)]
        public long? Rank { get; set; }

        [JsonProperty("match_score", NullValueHandling = NullValueHandling.Ignore)]
        public long? MatchScore { get; set; }

        [JsonProperty("rating_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? RatingId { get; set; }

        [JsonProperty("total_guild_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalGuildCount { get; set; }
    }

    public partial class GuildwarRankingStat
    {
        [JsonProperty("current", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, double> Current { get; set; }

        [JsonProperty("prev", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, double> Prev { get; set; }

        [JsonProperty("best", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, double> Best { get; set; }
    }
    
    public partial class GuildwarRewardList
    {
        [JsonProperty("rating_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? RatingId { get; set; }

        [JsonProperty("reward", NullValueHandling = NullValueHandling.Ignore)]
        public List<List<long>> Reward { get; set; }
    }

    public partial class GuildwarStatus
    {
        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public long? Status { get; set; }

        [JsonProperty("prepare_remained", NullValueHandling = NullValueHandling.Ignore)]
        public long? PrepareRemained { get; set; }

        [JsonProperty("match_remained", NullValueHandling = NullValueHandling.Ignore)]
        public long? MatchRemained { get; set; }

        [JsonProperty("reset_remained", NullValueHandling = NullValueHandling.Ignore)]
        public long? ResetRemained { get; set; }
    }

    public partial class MobCostumeEquipList
    {
        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("mob_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? MobId { get; set; }

        [JsonProperty("costume_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? CostumeId { get; set; }
    }

    public partial class MobCostumePartList
    {
        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("part_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? PartId { get; set; }
    }

    public partial class MyAtkdefList
    {
        [JsonProperty("match_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? MatchId { get; set; }

        [JsonProperty("atk_wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? AtkWizardId { get; set; }

        [JsonProperty("def_wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? DefWizardId { get; set; }
    }

    public partial class MyAttackList
    {
        [JsonProperty("match_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? MatchId { get; set; }

        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("guild_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? GuildId { get; set; }

        [JsonProperty("guild_point_var", NullValueHandling = NullValueHandling.Ignore)]
        public long? GuildPointVar { get; set; }

        [JsonProperty("energy", NullValueHandling = NullValueHandling.Ignore)]
        public long? Energy { get; set; }
    }

    public partial class MyWorldbossRanking
    {
        [JsonProperty("ranking", NullValueHandling = NullValueHandling.Ignore)]
        public long? Ranking { get; set; }

        [JsonProperty("accumulate_damage", NullValueHandling = NullValueHandling.Ignore)]
        public long? AccumulateDamage { get; set; }

        [JsonProperty("rating_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? RatingId { get; set; }

        [JsonProperty("ranking_rate", NullValueHandling = NullValueHandling.Ignore)]
        public double? RankingRate { get; set; }

        [JsonProperty("is_reward", NullValueHandling = NullValueHandling.Ignore)]
        public long? IsReward { get; set; }
    }
    
    public partial class The6001
    {
        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("npc_friend_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? NpcFriendId { get; set; }

        [JsonProperty("npc_friend_level", NullValueHandling = NullValueHandling.Ignore)]
        public long? NpcFriendLevel { get; set; }

        [JsonProperty("unit_master_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitMasterId { get; set; }

        [JsonProperty("unit_class", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitClass { get; set; }

        [JsonProperty("unit_level", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitLevel { get; set; }

        [JsonProperty("last_assist", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastAssist { get; set; }

        [JsonProperty("unit_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitId { get; set; }

        [JsonProperty("next_assist_time", NullValueHandling = NullValueHandling.Ignore)]
        public long? NextAssistTime { get; set; }
    }

    public partial class Slots
    {
        [JsonProperty("number", NullValueHandling = NullValueHandling.Ignore)]
        public long? Number { get; set; }
    }
    
    public partial class PvpRewardList
    {
        [JsonProperty("rating_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? RatingId { get; set; }

        [JsonProperty("crystals", NullValueHandling = NullValueHandling.Ignore)]
        public long? Crystals { get; set; }

        [JsonProperty("unit_master_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitMasterId { get; set; }

        [JsonProperty("unit_class", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitClass { get; set; }
    }

    public partial class RaidDeck
    {
        [JsonProperty("unit_id_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> UnitIdList { get; set; }

        [JsonProperty("leader_index", NullValueHandling = NullValueHandling.Ignore)]
        public long? LeaderIndex { get; set; }
    }

    public partial class RaidInfoList
    {
        [JsonProperty("raid_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? RaidId { get; set; }

        [JsonProperty("available_stage_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? AvailableStageId { get; set; }
    }

    public partial class RtpvpSeasonInfo
    {
        [JsonProperty("current_season", NullValueHandling = NullValueHandling.Ignore)]
        public long? CurrentSeason { get; set; }

        [JsonProperty("current_season_end", NullValueHandling = NullValueHandling.Ignore)]
        public long? CurrentSeasonEnd { get; set; }

        [JsonProperty("next_season", NullValueHandling = NullValueHandling.Ignore)]
        public long? NextSeason { get; set; }

        [JsonProperty("next_season_begin", NullValueHandling = NullValueHandling.Ignore)]
        public long? NextSeasonBegin { get; set; }

        [JsonProperty("display_end_time", NullValueHandling = NullValueHandling.Ignore)]
        public long? DisplayEndTime { get; set; }

        [JsonProperty("display_begin_time", NullValueHandling = NullValueHandling.Ignore)]
        public long? DisplayBeginTime { get; set; }
    }
    
    public partial class Rune
    {
        [JsonProperty("rune_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? RuneId { get; set; }

        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("occupied_type", NullValueHandling = NullValueHandling.Ignore)]
        public long? OccupiedType { get; set; }

        [JsonProperty("occupied_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? OccupiedId { get; set; }

        [JsonProperty("slot_no", NullValueHandling = NullValueHandling.Ignore)]
        public long? SlotNo { get; set; }

        [JsonProperty("rank", NullValueHandling = NullValueHandling.Ignore)]
        public long? Rank { get; set; }

        [JsonProperty("class", NullValueHandling = NullValueHandling.Ignore)]
        public long? Class { get; set; }

        [JsonProperty("set_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? SetId { get; set; }

        [JsonProperty("upgrade_limit", NullValueHandling = NullValueHandling.Ignore)]
        public long? UpgradeLimit { get; set; }

        [JsonProperty("upgrade_curr", NullValueHandling = NullValueHandling.Ignore)]
        public long? UpgradeCurr { get; set; }

        [JsonProperty("base_value", NullValueHandling = NullValueHandling.Ignore)]
        public long? BaseValue { get; set; }

        [JsonProperty("sell_value", NullValueHandling = NullValueHandling.Ignore)]
        public long? SellValue { get; set; }

        [JsonProperty("pri_eff", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> PriEff { get; set; }

        [JsonProperty("prefix_eff", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> PrefixEff { get; set; }

        [JsonProperty("sec_eff", NullValueHandling = NullValueHandling.Ignore)]
        public List<List<long>> SecEff { get; set; }

        [JsonProperty("extra", NullValueHandling = NullValueHandling.Ignore)]
        public long? Extra { get; set; }
    }
   
    public partial class Upgrade
    {
        [JsonProperty("number", NullValueHandling = NullValueHandling.Ignore)]
        public long? Number { get; set; }

        [JsonProperty("mana", NullValueHandling = NullValueHandling.Ignore)]
        public long? Mana { get; set; }

        [JsonProperty("crystal", NullValueHandling = NullValueHandling.Ignore)]
        public long? Crystal { get; set; }
    }

    public partial class PurpleUnitList
    {
        [JsonProperty("unit_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitId { get; set; }

        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("island_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? IslandId { get; set; }

        [JsonProperty("pos_x", NullValueHandling = NullValueHandling.Ignore)]
        public long? PosX { get; set; }

        [JsonProperty("pos_y", NullValueHandling = NullValueHandling.Ignore)]
        public long? PosY { get; set; }

        [JsonProperty("building_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? BuildingId { get; set; }

        [JsonProperty("unit_master_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitMasterId { get; set; }

        [JsonProperty("unit_level", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitLevel { get; set; }

        [JsonProperty("class", NullValueHandling = NullValueHandling.Ignore)]
        public long? Class { get; set; }

        [JsonProperty("con", NullValueHandling = NullValueHandling.Ignore)]
        public long? Con { get; set; }

        [JsonProperty("atk", NullValueHandling = NullValueHandling.Ignore)]
        public long? Atk { get; set; }

        [JsonProperty("def", NullValueHandling = NullValueHandling.Ignore)]
        public long? Def { get; set; }

        [JsonProperty("spd", NullValueHandling = NullValueHandling.Ignore)]
        public long? Spd { get; set; }

        [JsonProperty("resist", NullValueHandling = NullValueHandling.Ignore)]
        public long? Resist { get; set; }

        [JsonProperty("accuracy", NullValueHandling = NullValueHandling.Ignore)]
        public long? Accuracy { get; set; }

        [JsonProperty("critical_rate", NullValueHandling = NullValueHandling.Ignore)]
        public long? CriticalRate { get; set; }

        [JsonProperty("critical_damage", NullValueHandling = NullValueHandling.Ignore)]
        public long? CriticalDamage { get; set; }

        [JsonProperty("experience", NullValueHandling = NullValueHandling.Ignore)]
        public long? Experience { get; set; }

        [JsonProperty("exp_gained", NullValueHandling = NullValueHandling.Ignore)]
        public long? ExpGained { get; set; }

        [JsonProperty("exp_gain_rate", NullValueHandling = NullValueHandling.Ignore)]
        public long? ExpGainRate { get; set; }

        [JsonProperty("skills", NullValueHandling = NullValueHandling.Ignore)]
        public List<List<long>> Skills { get; set; }

        [JsonProperty("runes", NullValueHandling = NullValueHandling.Ignore)]
        public List<Rune> Runes { get; set; }

        [JsonProperty("costume_master_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? CostumeMasterId { get; set; }

        [JsonProperty("trans_items", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> TransItems { get; set; }

        [JsonProperty("attribute", NullValueHandling = NullValueHandling.Ignore)]
        public long? Attribute { get; set; }

        [JsonProperty("create_time", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreateTime { get; set; }

        [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
        public long? Source { get; set; }

        [JsonProperty("awakening_info", NullValueHandling = NullValueHandling.Ignore)]
        public AwakeningInfoUnion? AwakeningInfo { get; set; }
    }

    public partial class AwakeningInfoClass
    {
        [JsonProperty("rid", NullValueHandling = NullValueHandling.Ignore)]
        public long? Rid { get; set; }

        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("unit_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitId { get; set; }

        [JsonProperty("unit_master_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitMasterId { get; set; }

        [JsonProperty("awaken_master_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? AwakenMasterId { get; set; }

        [JsonProperty("exp", NullValueHandling = NullValueHandling.Ignore)]
        public long? Exp { get; set; }

        [JsonProperty("is_awakened", NullValueHandling = NullValueHandling.Ignore)]
        public long? IsAwakened { get; set; }

        [JsonProperty("date_mod", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateMod { get; set; }

        [JsonProperty("date_add", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateAdd { get; set; }

        [JsonProperty("max_exp", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxExp { get; set; }
    }
    
    public partial class WizardInfo
    {
        [JsonProperty("wizard_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardId { get; set; }

        [JsonProperty("wizard_name", NullValueHandling = NullValueHandling.Ignore)]
        public string WizardName { get; set; }

        [JsonProperty("wizard_mana", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardMana { get; set; }

        [JsonProperty("wizard_crystal", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardCrystal { get; set; }

        [JsonProperty("wizard_crystal_paid", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardCrystalPaid { get; set; }

        [JsonProperty("wizard_last_login", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? WizardLastLogin { get; set; }

        [JsonProperty("wizard_last_country", NullValueHandling = NullValueHandling.Ignore)]
        public string WizardLastCountry { get; set; }

        [JsonProperty("wizard_last_lang", NullValueHandling = NullValueHandling.Ignore)]
        public string WizardLastLang { get; set; }

        [JsonProperty("wizard_level", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardLevel { get; set; }

        [JsonProperty("experience", NullValueHandling = NullValueHandling.Ignore)]
        public long? Experience { get; set; }

        [JsonProperty("wizard_energy", NullValueHandling = NullValueHandling.Ignore)]
        public long? WizardEnergy { get; set; }

        [JsonProperty("energy_max", NullValueHandling = NullValueHandling.Ignore)]
        public long? EnergyMax { get; set; }

        [JsonProperty("energy_per_min", NullValueHandling = NullValueHandling.Ignore)]
        public double? EnergyPerMin { get; set; }

        [JsonProperty("next_energy_gain", NullValueHandling = NullValueHandling.Ignore)]
        public long? NextEnergyGain { get; set; }

        [JsonProperty("arena_energy", NullValueHandling = NullValueHandling.Ignore)]
        public long? ArenaEnergy { get; set; }

        [JsonProperty("arena_energy_max", NullValueHandling = NullValueHandling.Ignore)]
        public long? ArenaEnergyMax { get; set; }

        [JsonProperty("arena_energy_next_gain", NullValueHandling = NullValueHandling.Ignore)]
        public long? ArenaEnergyNextGain { get; set; }

        [JsonProperty("unit_slots", NullValueHandling = NullValueHandling.Ignore)]
        public Slots UnitSlots { get; set; }

        [JsonProperty("rep_unit_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? RepUnitId { get; set; }

        [JsonProperty("rep_assigned", NullValueHandling = NullValueHandling.Ignore)]
        public long? RepAssigned { get; set; }

        [JsonProperty("pvp_event", NullValueHandling = NullValueHandling.Ignore)]
        public long? PvpEvent { get; set; }

        [JsonProperty("mail_box_event", NullValueHandling = NullValueHandling.Ignore)]
        public long? MailBoxEvent { get; set; }

        [JsonProperty("social_point_current", NullValueHandling = NullValueHandling.Ignore)]
        public long? SocialPointCurrent { get; set; }

        [JsonProperty("social_point_max", NullValueHandling = NullValueHandling.Ignore)]
        public long? SocialPointMax { get; set; }

        [JsonProperty("honor_point", NullValueHandling = NullValueHandling.Ignore)]
        public long? HonorPoint { get; set; }

        [JsonProperty("guild_point", NullValueHandling = NullValueHandling.Ignore)]
        public long? GuildPoint { get; set; }

        [JsonProperty("darkportal_energy", NullValueHandling = NullValueHandling.Ignore)]
        public long? DarkportalEnergy { get; set; }

        [JsonProperty("darkportal_energy_max", NullValueHandling = NullValueHandling.Ignore)]
        public long? DarkportalEnergyMax { get; set; }

        [JsonProperty("costume_point", NullValueHandling = NullValueHandling.Ignore)]
        public long? CostumePoint { get; set; }

        [JsonProperty("costume_point_max", NullValueHandling = NullValueHandling.Ignore)]
        public long? CostumePointMax { get; set; }

        [JsonProperty("honor_medal", NullValueHandling = NullValueHandling.Ignore)]
        public long? HonorMedal { get; set; }

        [JsonProperty("honor_mark", NullValueHandling = NullValueHandling.Ignore)]
        public long? HonorMark { get; set; }

        [JsonProperty("event_coin", NullValueHandling = NullValueHandling.Ignore)]
        public long? EventCoin { get; set; }

        [JsonProperty("lobby_master_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? LobbyMasterId { get; set; }

        [JsonProperty("emblem_master_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? EmblemMasterId { get; set; }

        [JsonProperty("period_energy_max", NullValueHandling = NullValueHandling.Ignore)]
        public long? PeriodEnergyMax { get; set; }
    }

    public partial struct SkillInfo
    {
        public List<long> IntegerArray;
        public Dictionary<string, long> IntegerMap;

        public static implicit operator SkillInfo(List<long> IntegerArray) => new SkillInfo { IntegerArray = IntegerArray };
        public static implicit operator SkillInfo(Dictionary<string, long> IntegerMap) => new SkillInfo { IntegerMap = IntegerMap };
    }

    public partial struct ItemUnion
    {
        public long? Integer;
        public List<long> IntegerArray;

        public static implicit operator ItemUnion(long Integer) => new ItemUnion { Integer = Integer };
        public static implicit operator ItemUnion(List<long> IntegerArray) => new ItemUnion { IntegerArray = IntegerArray };
    }

    public partial struct AwakeningInfoUnion
    {
        public List<object> AnythingArray;
        public AwakeningInfoClass AwakeningInfoClass;

        public static implicit operator AwakeningInfoUnion(List<object> AnythingArray) => new AwakeningInfoUnion { AnythingArray = AnythingArray };
        public static implicit operator AwakeningInfoUnion(AwakeningInfoClass AwakeningInfoClass) => new AwakeningInfoUnion { AwakeningInfoClass = AwakeningInfoClass };
    }

    public partial class JsonSwex
    {
        public static JsonSwex FromJson(string json) => JsonConvert.DeserializeObject<JsonSwex>(json, Summoners_War_Statistics.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this JsonSwex self) => JsonConvert.SerializeObject(self, Summoners_War_Statistics.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                SkillInfoConverter.Singleton,
                ItemUnionConverter.Singleton,
                AwakeningInfoUnionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class SkillInfoConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SkillInfo) || t == typeof(SkillInfo?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Dictionary<string, long>>(reader);
                    return new SkillInfo { IntegerMap = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<long>>(reader);
                    return new SkillInfo { IntegerArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type SkillInfo");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SkillInfo)untypedValue;
            if (value.IntegerArray != null)
            {
                serializer.Serialize(writer, value.IntegerArray);
                return;
            }
            if (value.IntegerMap != null)
            {
                serializer.Serialize(writer, value.IntegerMap);
                return;
            }
            throw new Exception("Cannot marshal type SkillInfo");
        }

        public static readonly SkillInfoConverter Singleton = new SkillInfoConverter();
    }

    internal class ItemUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ItemUnion) || t == typeof(ItemUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new ItemUnion { Integer = integerValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<long>>(reader);
                    return new ItemUnion { IntegerArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type ItemUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ItemUnion)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.IntegerArray != null)
            {
                serializer.Serialize(writer, value.IntegerArray);
                return;
            }
            throw new Exception("Cannot marshal type ItemUnion");
        }

        public static readonly ItemUnionConverter Singleton = new ItemUnionConverter();
    }

    internal class AwakeningInfoUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AwakeningInfoUnion) || t == typeof(AwakeningInfoUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<AwakeningInfoClass>(reader);
                    return new AwakeningInfoUnion { AwakeningInfoClass = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<object>>(reader);
                    return new AwakeningInfoUnion { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type AwakeningInfoUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (AwakeningInfoUnion)untypedValue;
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.AwakeningInfoClass != null)
            {
                serializer.Serialize(writer, value.AwakeningInfoClass);
                return;
            }
            throw new Exception("Cannot marshal type AwakeningInfoUnion");
        }

        public static readonly AwakeningInfoUnionConverter Singleton = new AwakeningInfoUnionConverter();
    }
}
